{"version":3,"sources":["../../server/lib/db.js"],"names":["log","event","dbUrl","console","toUpperCase","redactURLAuth","url","parsedUrl","redactedAuth","auth","protocol","hostname","port","path","connect","process","env","MONGODB_URI","mongoose","useNewUrlParser","redactedUrl","connection","on","close","exit","disconnect","dropCollection","name","catch","err","codeName"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA;;AAEA,IAAMA,GAAG,GAAG,SAANA,GAAM,CAACC,KAAD,EAAQC,KAAR;AAAA,SAAkB;AAAA,WAAMC,OAAO,CAACH,GAAR,WAAeC,KAAK,CAACG,WAAN,EAAf,6BAAqDF,KAArD,EAAN;AAAA,GAAlB;AAAA,CAAZ;;AAEA,IAAMG,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,GAAG,EAAI;AACzB,MAAMC,SAAS,GAAG,gBAAMD,GAAN,CAAlB;AACA,MAAME,YAAY,GAAGD,SAAS,CAACE,IAAV,GAAiB,UAAjB,GAA8B,EAAnD;AACA,mBAAUF,SAAS,CAACG,QAApB,eAAiCF,YAAjC,SAAgDD,SAAS,CAACI,QAA1D,cAAsEJ,SAAS,CAACK,IAAhF,SAAuFL,SAAS,CAACM,IAAjG;AACH,CAJD;;AAMO,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAqC;AAAA,MAApCZ,KAAoC,uEAA5Ba,OAAO,CAACC,GAAR,CAAYC,WAAgB;;AACxDC,oBAASJ,OAAT,CAAiBZ,KAAjB,EAAwB;AAAEiB,IAAAA,eAAe,EAAE;AAAnB,GAAxB;;AAEA,MAAMC,WAAW,GAAGf,aAAa,CAACH,KAAD,CAAjC;;AAEAgB,oBAASG,UAAT,CAAoBC,EAApB,CAAuB,OAAvB,EAAgCtB,GAAG,CAAC,OAAD,EAAUoB,WAAV,CAAnC;;AACAF,oBAASG,UAAT,CAAoBC,EAApB,CAAuB,MAAvB,EAA+BtB,GAAG,CAAC,MAAD,EAASoB,WAAT,CAAlC;;AACAF,oBAASG,UAAT,CAAoBC,EAApB,CAAuB,OAAvB,EAAgCtB,GAAG,CAAC,OAAD,EAAUoB,WAAV,CAAnC;;AAEAL,EAAAA,OAAO,CAACO,EAAR,CAAW,QAAX,EAAqB,YAAM;AACvBJ,sBAASG,UAAT,CAAoBE,KAApB,CAA0B,YAAM;AAC5BpB,MAAAA,OAAO,CAACH,GAAR,CAAY,kEAAZ;AACAe,MAAAA,OAAO,CAACS,IAAR,CAAa,CAAb;AACH,KAHD;AAIH,GALD;AAMH,CAfM;;;;AAiBA,IAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAMP,kBAASG,UAAT,CAAoBE,KAApB,EAAN;AAAA,CAAnB;;;;AAEA,IAAMG,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,IAAI,EAAI;AAAA,MAC1BV,WAD0B,GACVF,OAAO,CAACC,GADE,CAC1BC,WAD0B;AAElCH,EAAAA,OAAO,CAACG,WAAD,CAAP;AACA,SAAOC,kBAASG,UAAT,CAAoBK,cAApB,CAAmCC,IAAnC,EACFC,KADE,CACI,UAAAC,GAAG,EAAI;AACV,QAAGA,GAAG,CAACC,QAAJ,KAAiB,mBAApB,EAAyC,MAAMD,GAAN;AAC5C,GAHE,CAAP;AAIH,CAPM","sourcesContent":["import mongoose from 'mongoose';\nimport { parse } from 'url';\nimport { config } from 'dotenv';\n\nconfig();\n\nconst log = (event, dbUrl) => () => console.log(`${event.toUpperCase()}: connection to ${dbUrl}`);\n\nconst redactURLAuth = url => {\n    const parsedUrl = parse(url);\n    const redactedAuth = parsedUrl.auth ? '***:***@' : '';\n    return `${parsedUrl.protocol}//${redactedAuth}${parsedUrl.hostname}:${parsedUrl.port}${parsedUrl.path}`;\n};\n\nexport const connect = (dbUrl = process.env.MONGODB_URI) => {\n    mongoose.connect(dbUrl, { useNewUrlParser: true });\n\n    const redactedUrl = redactURLAuth(dbUrl);\n\n    mongoose.connection.on('error', log('error', redactedUrl));\n    mongoose.connection.on('open', log('open', redactedUrl));\n    mongoose.connection.on('close', log('close', redactedUrl));\n\n    process.on('SIGINT', () => {\n        mongoose.connection.close(() => {\n            console.log('Mongoose default connection disconnected through app termination');\n            process.exit(0);\n        });\n    });\n};\n\nexport const disconnect = () => mongoose.connection.close();\n\nexport const dropCollection = name => {\n    const { MONGODB_URI } = process.env;\n    connect(MONGODB_URI);\n    return mongoose.connection.dropCollection(name)\n        .catch(err => {\n            if(err.codeName !== 'NamespaceNotFound') throw err;\n        });\n};\n"],"file":"db.js"}