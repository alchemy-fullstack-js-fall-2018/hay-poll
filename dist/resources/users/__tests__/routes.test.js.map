{"version":3,"sources":["../../../../server/resources/users/__tests__/routes.test.js"],"names":["describe","beforeAll","afterAll","it","app","post","send","email","password","then","res","expect","body","toEqual","_id","any","String","get","status","token","set"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;;;;;;;AAEAA,QAAQ,CAAC,aAAD,EAAgB,YAAM;AAE5BC,EAAAA,SAAS;AAAA;AAAA;AAAA;AAAA,0BAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACF,kBADE;;AAAA;AAAA;AAAA,mBAEF,wBAAe,OAAf,CAFE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,GAAT;AAKAC,EAAAA,QAAQ;AAAA;AAAA;AAAA;AAAA,0BAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACD,qBADC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,GAAR;AAKAC,EAAAA,EAAE,CAAC,gBAAD,EAAmB,YAAM;AACzB,WAAO,wBAAQC,YAAR,EACJC,IADI,CACC,mBADD,EAEJC,IAFI,CAEC;AAAEC,MAAAA,KAAK,EAAE,eAAT;AAA0BC,MAAAA,QAAQ,EAAE;AAApC,KAFD,EAGJC,IAHI,CAGC,UAAAC,GAAG,EAAI;AACXC,MAAAA,MAAM,CAACD,GAAG,CAACE,IAAL,CAAN,CAAiBC,OAAjB,CAAyB;AAAEC,QAAAA,GAAG,EAAEH,MAAM,CAACI,GAAP,CAAWC,MAAX,CAAP;AAA2BT,QAAAA,KAAK,EAAE;AAAlC,OAAzB;AACD,KALI,CAAP;AAMD,GAPC,CAAF;AASAJ,EAAAA,EAAE,CAAC,cAAD,EAAiB,YAAM;AACvB,WAAO,wBAAQC,YAAR,EACJC,IADI,CACC,kBADD,EAEJC,IAFI,CAEC;AAAEC,MAAAA,KAAK,EAAE,eAAT;AAA0BC,MAAAA,QAAQ,EAAE;AAApC,KAFD,EAGJC,IAHI,CAGC,UAAAC,GAAG,EAAI;AACXC,MAAAA,MAAM,CAACD,GAAG,CAACE,IAAL,CAAN,CAAiBC,OAAjB,CAAyB;AAAEC,QAAAA,GAAG,EAAEH,MAAM,CAACI,GAAP,CAAWC,MAAX,CAAP;AAA2BT,QAAAA,KAAK,EAAE;AAAlC,OAAzB;AACAI,MAAAA,MAAM,CAACD,GAAG,CAACO,GAAJ,CAAQ,cAAR,CAAD,CAAN,CAAgCJ,OAAhC,CAAwCF,MAAM,CAACI,GAAP,CAAWC,MAAX,CAAxC;AACD,KANI,CAAP;AAOD,GARC,CAAF;AAUAb,EAAAA,EAAE,CAAC,2CAAD,EAA8C,YAAM;AACpD,WAAO,wBAAQC,YAAR,EACJC,IADI,CACC,kBADD,EAEJC,IAFI,CAEC;AAAEC,MAAAA,KAAK,EAAE,eAAT;AAA0BC,MAAAA,QAAQ,EAAE;AAApC,KAFD,EAGJC,IAHI,CAGC,UAAAC,GAAG,EAAI;AACXC,MAAAA,MAAM,CAACD,GAAG,CAACQ,MAAL,CAAN,CAAmBL,OAAnB,CAA2B,GAA3B;AACD,KALI,CAAP;AAMD,GAPC,CAAF;AASAV,EAAAA,EAAE,CAAC,mBAAD,EAAsB,YAAM;AAC5B,QAAMgB,KAAK,GAAG,oBAAS;AAAEL,MAAAA,GAAG,EAAE,MAAP;AAAeP,MAAAA,KAAK,EAAE;AAAtB,KAAT,CAAd;AAEA,WAAO,wBAAQH,YAAR,EACJa,GADI,CACA,mBADA,EAEJG,GAFI,CAEA,eAFA,mBAE2BD,KAF3B,GAGJV,IAHI,CAGC,UAAAC,GAAG,EAAI;AACXC,MAAAA,MAAM,CAACD,GAAG,CAACE,IAAL,CAAN,CAAiBC,OAAjB,CAAyB;AAAEC,QAAAA,GAAG,EAAE,MAAP;AAAeP,QAAAA,KAAK,EAAE;AAAtB,OAAzB;AACD,KALI,CAAP;AAMD,GATC,CAAF;AAUD,CAlDO,CAAR","sourcesContent":["import app from '../../../app';\nimport request from 'supertest';\nimport { connect, disconnect, dropCollection } from '../../../lib/db'\nimport { tokenize } from '../../../lib/auth';\n\ndescribe('auth routes', () => {\n\n  beforeAll(async () => {\n    await connect();\n    await dropCollection('users');\n  });\n\n  afterAll(async () => {\n    await disconnect();\n  });\n\n\n  it('creates a user', () => {\n    return request(app)\n      .post('/api/users/signup')\n      .send({ email: 'test@test.com', password: '1234' })\n      .then(res => {\n        expect(res.body).toEqual({ _id: expect.any(String), email: 'test@test.com' })\n      })\n  });\n\n  it('login a user', () => {\n    return request(app)\n      .post('/api/users/login')\n      .send({ email: 'test@test.com', password: '1234' })\n      .then(res => {\n        expect(res.body).toEqual({ _id: expect.any(String), email: 'test@test.com' });\n        expect(res.get('X-AUTH-TOKEN')).toEqual(expect.any(String))\n      });\n  });\n\n  it('fails to login a user with a bad password', () => {\n    return request(app)\n      .post('/api/users/login')\n      .send({ email: 'test@test.com', password: '1234567' })\n      .then(res => {\n        expect(res.status).toEqual(401);\n      });\n  });\n\n  it('can verify a user', () => {\n    const token = tokenize({ _id: '1234', email: 'test@test.com' });\n\n    return request(app)\n      .get('/api/users/verify')\n      .set('Authorization', `Bearer ${token}`)\n      .then(res => {\n        expect(res.body).toEqual({ _id: '1234', email: 'test@test.com' })\n      })\n  });\n});\n"],"file":"routes.test.js"}