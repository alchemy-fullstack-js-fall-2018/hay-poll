{"version":3,"sources":["../../../server/resources/users/routes.js"],"names":["post","req","res","next","body","email","password","User","create","then","user","json","catch","findOne","compare","HttpError","code","message","authToken","setHeader","get","requireAuth"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;eAEe,uBACZA,IADY,CACP,eADO,EACU,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAAA,kBACbF,GAAG,CAACG,IADS;AAAA,MACjCC,KADiC,aACjCA,KADiC;AAAA,MAC1BC,QAD0B,aAC1BA,QAD0B;;AAEzCC,iBAAKC,MAAL,CAAY;AAAEH,IAAAA,KAAK,EAALA,KAAF;AAASC,IAAAA,QAAQ,EAARA;AAAT,GAAZ,EACGG,IADH,CACQ,UAAAC,IAAI;AAAA,WAAIR,GAAG,CAACS,IAAJ,CAASD,IAAT,CAAJ;AAAA,GADZ,EAEGE,KAFH,CAEST,IAFT;AAGD,CANY,EAQZH,IARY,CAQP,cARO,EAQS,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAAA,mBACZF,GAAG,CAACG,IADQ;AAAA,MAChCC,KADgC,cAChCA,KADgC;AAAA,MACzBC,QADyB,cACzBA,QADyB;;AAExCC,iBAAKM,OAAL,CAAa;AAAER,IAAAA,KAAK,EAALA;AAAF,GAAb,EACGI,IADH,CACQ,UAAAC,IAAI,EAAI;AACZ,QAAG,CAACA,IAAI,CAACI,OAAL,CAAaR,QAAb,CAAJ,EAA4B,OAAOH,IAAI,CAAC,IAAIY,gBAAJ,CAAc;AAAEC,MAAAA,IAAI,EAAE,GAAR;AAAaC,MAAAA,OAAO,EAAE;AAAtB,KAAd,CAAD,CAAX;AAC5B,QAAMC,SAAS,GAAGR,IAAI,CAACQ,SAAL,EAAlB;AACAhB,IAAAA,GAAG,CAACiB,SAAJ,CAAc,cAAd,EAA8BD,SAA9B;AACAhB,IAAAA,GAAG,CAACS,IAAJ,CAASD,IAAT;AACD,GANH,EAOGE,KAPH,CAOST,IAPT;AAQD,CAlBY,EAoBZiB,GApBY,CAoBR,eApBQ,EAoBSC,oBApBT,EAoBsB,UAACpB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACrDD,EAAAA,GAAG,CAACS,IAAJ,CAASV,GAAG,CAACS,IAAb;AACD,CAtBY,C","sourcesContent":["import { Router } from 'express';\nimport User from './model';\nimport requireAuth from '../../middleware/requireAuth';\nimport { HttpError } from '../../middleware/error';\n\nexport default Router()\n  .post('/users/signup', (req, res, next) => {\n    const { email, password } = req.body;\n    User.create({ email, password })\n      .then(user => res.json(user))\n      .catch(next);\n  })\n\n  .post('/users/login', (req, res, next) => {\n    const { email, password } = req.body;\n    User.findOne({ email })\n      .then(user => {\n        if(!user.compare(password)) return next(new HttpError({ code: 401, message: 'Invalid email/password' }));\n        const authToken = user.authToken();\n        res.setHeader('X-AUTH-TOKEN', authToken);\n        res.json(user);\n      })\n      .catch(next);\n  })\n\n  .get('/users/verify', requireAuth, (req, res, next) => {\n    res.json(req.user);\n  });\n"],"file":"routes.js"}