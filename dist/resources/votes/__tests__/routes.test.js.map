{"version":3,"sources":["../../../../server/resources/votes/__tests__/routes.test.js"],"names":["chance","require","Chance","describe","createdUser","createdToken","beforeEach","app","post","send","email","password","then","res","body","header","beforeAll","afterAll","test","poll","set","createdPoll","vote","_id","selection","choices","natural","min","max","expect","toEqual","any","String","__v","Number","quantities","length","voteArrays","get","forEach","quantity","toContainEqual","count"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;;;;;;;;;;;AAFA,IAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB,EAAf;;AAIAC,QAAQ,CAAC,cAAD,EAAiB,YAAM;AAE7B,MAAIC,WAAJ;AACA,MAAIC,YAAJ;AAEAC,EAAAA,UAAU;AAAA;AAAA;AAAA;AAAA,0BAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACH,wBAAQC,YAAR,EACHC,IADG,CACE,mBADF,EAEHC,IAFG,CAEE;AAAEC,cAAAA,KAAK,EAAE,eAAT;AAA0BC,cAAAA,QAAQ,EAAE;AAApC,aAFF,CADG;;AAAA;AAAA;AAAA,mBAIH,wBAAQJ,YAAR,EACHC,IADG,CACE,kBADF,EAEHC,IAFG,CAEE;AAAEC,cAAAA,KAAK,EAAE,eAAT;AAA0BC,cAAAA,QAAQ,EAAE;AAApC,aAFF,EAGHC,IAHG,CAGE,UAAAC,GAAG,EAAI;AACXT,cAAAA,WAAW,GAAGS,GAAG,CAACC,IAAlB;AACAT,cAAAA,YAAY,GAAGQ,GAAG,CAACE,MAAJ,CAAW,cAAX,CAAf;AACD,aANG,CAJG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,GAAV;AAaAC,EAAAA,SAAS;AAAA;AAAA;AAAA;AAAA,0BAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACF,wBAAe,OAAf,CADE;;AAAA;AAAA;AAAA,mBAEF,wBAAe,OAAf,CAFE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,GAAT;AAIAC,EAAAA,QAAQ;AAAA;AAAA;AAAA;AAAA,0BAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAkB,qBAAlB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,GAAR;AAEAC,EAAAA,IAAI,CAAC,8BAAD;AAAA;AAAA;AAAA;AAAA,0BAAiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAE7BC,YAAAA,IAF6B,GAEtB,qBAFsB;AAAA;AAAA,mBAK7B,wBAAQZ,YAAR,EACHC,IADG,CACE,YADF,EAEHY,GAFG,CAEC,eAFD,mBAE4Bf,YAF5B,GAGHI,IAHG,CAGEU,IAHF,EAIHP,IAJG,CAIE;AAAA,kBAAGE,IAAH,SAAGA,IAAH;AAAA,qBAAcO,WAAW,GAAGP,IAA5B;AAAA,aAJF,CAL6B;;AAAA;AAW7BQ,YAAAA,IAX6B,GAWtB;AACXH,cAAAA,IAAI,EAAEE,WAAW,CAACE,GADP;AAEXC,cAAAA,SAAS,EAAEH,WAAW,CAACI,OAAZ,CAAoBzB,MAAM,CAAC0B,OAAP,CAAe;AAAEC,gBAAAA,GAAG,EAAE,CAAP;AAAUC,gBAAAA,GAAG,EAAE;AAAf,eAAf,CAApB,EAAwDL;AAFxD,aAXsB;AAAA;AAAA,mBAgB7B,wBAAQhB,YAAR,EACHC,IADG,sBACgBa,WAAW,CAACE,GAD5B,aAEHH,GAFG,CAEC,eAFD,mBAE4Bf,YAF5B,GAGHI,IAHG,CAGEa,IAHF,EAIHV,IAJG,CAIE,UAAAC,GAAG,EAAI;AACX,qCAAU,GAAV,EAAeA,GAAf;AACAgB,cAAAA,MAAM,CAAChB,GAAG,CAACC,IAAL,CAAN,CAAiBgB,OAAjB,mBACKR,IADL;AAEEC,gBAAAA,GAAG,EAAEM,MAAM,CAACE,GAAP,CAAWC,MAAX,CAFP;AAGEC,gBAAAA,GAAG,EAAEJ,MAAM,CAACE,GAAP,CAAWG,MAAX;AAHP;AAKD,aAXG,CAhB6B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjC,GAAJ;AA8BAhB,EAAAA,IAAI,CAAC,+BAAD;AAAA;AAAA;AAAA;AAAA,0BAAkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAE9BC,YAAAA,IAF8B,GAEvB,qBAFuB;AAAA;AAAA,mBAK9B,wBAAQZ,YAAR,EACHC,IADG,CACE,YADF,EAEHY,GAFG,CAEC,eAFD,mBAE4Bf,YAF5B,GAGHI,IAHG,CAGEU,IAHF,EAIHP,IAJG,CAIE;AAAA,kBAAGE,IAAH,SAAGA,IAAH;AAAA,qBAAcO,WAAW,GAAGP,IAA5B;AAAA,aAJF,CAL8B;;AAAA;AAW9BqB,YAAAA,UAX8B,GAWjB,gCAAqBhB,IAAI,CAACM,OAAL,CAAaW,MAAlC,CAXiB;AAY9BC,YAAAA,UAZ8B,GAYjB,4BAAiBF,UAAjB,EAA6Bd,WAA7B,CAZiB;AAAA;AAAA,mBAa9B,oBAASA,WAAT,EAAsBgB,UAAtB,EAAkChC,YAAlC,CAb8B;;AAAA;AAAA;AAAA,mBAe9B,wBAAQE,YAAR,EACH+B,GADG,sBACejB,WAAW,CAACE,GAD3B,eAEHX,IAFG,CAEE,iBAAc;AAAA,kBAAXE,IAAW,SAAXA,IAAW;AAClBqB,cAAAA,UAAU,CAACI,OAAX,CAAmB,UAAAC,QAAQ,EAAI;AAC7BX,gBAAAA,MAAM,CAACf,IAAD,CAAN,CAAa2B,cAAb,CAA4B;AAC1BlB,kBAAAA,GAAG,EAAEM,MAAM,CAACE,GAAP,CAAWC,MAAX,CADqB;AAE1BU,kBAAAA,KAAK,EAAEF;AAFmB,iBAA5B;AAID,eALD;AAMD,aATG,CAf8B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlC,GAAJ;AA2BD,CAjFO,CAAR","sourcesContent":["import { checkCode } from '../../../testing/lib/errors';\nimport { connect, disconnect, dropCollection } from '../../../lib/db';\nimport request from 'supertest';\nimport app from '../../../app';\nconst chance = require('chance').Chance();\nimport { mockPoll, mockPolls, postPoll } from '../../../testing/fixtures/poll';\nimport { randomVoteQuantities, randomVoteArrays, runVotes } from '../../../testing/fixtures/vote';\n\ndescribe('votes routes', () => {\n\n  let createdUser;\n  let createdToken;\n\n  beforeEach(async () => {\n    await request(app)\n      .post('/api/users/signup')\n      .send({ email: 'jack@test.com', password: 'abcdef' })\n    await request(app)\n      .post('/api/users/login')\n      .send({ email: 'jack@test.com', password: 'abcdef' })\n      .then(res => {\n        createdUser = res.body;\n        createdToken = res.header['x-auth-token'];\n      });\n\n  });\n  beforeAll(async () => {\n    await dropCollection('polls');\n    await dropCollection('votes');\n  });\n  afterAll(async () => await disconnect());\n\n  test('post to /api/polls/:id/votes', async () => {\n\n    const poll = mockPoll();\n    let createdPoll;\n\n    await request(app)\n      .post('/api/polls')\n      .set('Authorization', `Bearer ${createdToken}`)\n      .send(poll)\n      .then(({ body }) => createdPoll = body);\n\n    const vote = {\n      poll: createdPoll._id,\n      selection: createdPoll.choices[chance.natural({ min: 0, max: 3 })]._id\n    }\n\n    await request(app)\n      .post(`/api/polls/${createdPoll._id}/votes`)\n      .set('Authorization', `Bearer ${createdToken}`)\n      .send(vote)\n      .then(res => {\n        checkCode(200)(res);\n        expect(res.body).toEqual({\n          ...vote,\n          _id: expect.any(String),\n          __v: expect.any(Number)\n        })\n      });\n  });\n\n  test('get to /api/polls/:id/results', async () => {\n\n    const poll = mockPoll();\n    let createdPoll;\n\n    await request(app)\n      .post('/api/polls')\n      .set('Authorization', `Bearer ${createdToken}`)\n      .send(poll)\n      .then(({ body }) => createdPoll = body);\n\n    const quantities = randomVoteQuantities(poll.choices.length)\n    const voteArrays = randomVoteArrays(quantities, createdPoll);\n    await runVotes(createdPoll, voteArrays, createdToken);\n\n    await request(app)\n      .get(`/api/polls/${createdPoll._id}/results`)\n      .then(({ body }) => {\n        quantities.forEach(quantity => {\n          expect(body).toContainEqual({\n            _id: expect.any(String),\n            count: quantity\n          })\n        })\n      })\n  });\n\n});\n"],"file":"routes.test.js"}