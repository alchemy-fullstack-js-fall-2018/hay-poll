{"version":3,"sources":["../../../../server/resources/polls/__tests__/model.test.js"],"names":["chance","require","Chance","describe","test","data","poll","Poll","jsonPoll","toJSON","expect","toEqual","_id","any","Object","choices","map","choice","errors","validateSync","title","properties","message","description"],"mappings":";;AAAA;;AACA;;AACA;;;;;;;;AACA,IAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB,EAAf;;AAEAC,QAAQ,CAAC,YAAD,EAAe,YAAM;AAE3BC,EAAAA,IAAI,CAAC,wBAAD,EAA2B,YAAM;AACnC,QAAMC,IAAI,GAAG,qBAAb;AACA,QAAMC,IAAI,GAAG,IAAIC,cAAJ,CAASF,IAAT,CAAb;AACA,QAAMG,QAAQ,GAAGF,IAAI,CAACG,MAAL,EAAjB;AAEAC,IAAAA,MAAM,CAACF,QAAD,CAAN,CAAiBG,OAAjB,mBACKN,IADL;AAEEO,MAAAA,GAAG,EAAEF,MAAM,CAACG,GAAP,CAAWC,MAAX,CAFP;AAGEC,MAAAA,OAAO,EAAEV,IAAI,CAACU,OAAL,CAAaC,GAAb,CAAiB,UAAAC,MAAM;AAAA,iCAAUA,MAAV;AAAkBL,UAAAA,GAAG,EAAEF,MAAM,CAACG,GAAP,CAAWC,MAAX;AAAvB;AAAA,OAAvB;AAHX;AAKD,GAVG,CAAJ;AAYAV,EAAAA,IAAI,CAAC,0CAAD,EAA6C,YAAM;AACrD,QAAME,IAAI,GAAG,IAAIC,cAAJ,CAAS,EAAT,CAAb;AACA,QAAMW,MAAM,GAAG,uBAAUZ,IAAI,CAACa,YAAL,EAAV,EAA+B,CAA/B,CAAf;AAEAT,IAAAA,MAAM,CAACQ,MAAM,CAACE,KAAP,CAAaC,UAAb,CAAwBC,OAAzB,CAAN,CAAwCX,OAAxC,CAAgD,2BAAhD;AACAD,IAAAA,MAAM,CAACQ,MAAM,CAACK,WAAP,CAAmBF,UAAnB,CAA8BC,OAA/B,CAAN,CAA8CX,OAA9C,CAAsD,iCAAtD;AACAD,IAAAA,MAAM,CAACQ,MAAM,CAACH,OAAP,CAAeM,UAAf,CAA0BC,OAA3B,CAAN,CAA0CX,OAA1C,CAAkD,mDAAlD;AACD,GAPG,CAAJ;AAUD,CAxBO,CAAR","sourcesContent":["import Poll from '../model';\nimport { getErrors } from '../../../testing/lib/errors';\nimport { mockPoll } from '../../../testing/fixtures/poll';\nconst chance = require('chance').Chance();\n\ndescribe('poll model', () => {\n\n  test('validates a good model', () => {\n    const data = mockPoll();\n    const poll = new Poll(data);\n    const jsonPoll = poll.toJSON();\n\n    expect(jsonPoll).toEqual({\n      ...data,\n      _id: expect.any(Object),\n      choices: data.choices.map(choice => ({ ...choice, _id: expect.any(Object) }))\n    });\n  });\n\n  test('requires title, description, and choices', () => {\n    const poll = new Poll({});\n    const errors = getErrors(poll.validateSync(), 3);\n\n    expect(errors.title.properties.message).toEqual('Path `title` is required.');\n    expect(errors.description.properties.message).toEqual('Path `description` is required.');\n    expect(errors.choices.properties.message).toEqual('Validator failed for path `choices` with value ``');\n  });\n\n\n});\n"],"file":"model.test.js"}