{"version":3,"sources":["../../../../server/resources/polls/__tests__/routes.test.js"],"names":["chance","require","Chance","describe","createdUser","createdToken","beforeEach","app","post","send","email","password","then","res","body","header","beforeAll","afterAll","test","poll","set","expect","toEqual","_id","any","String","__v","Number","choices","map","choice","polls","forEach","get","toContainEqual","createdPoll"],"mappings":"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","sourcesContent":["import { checkCode } from '../../../testing/lib/errors';\nimport { connect, disconnect, dropCollection } from '../../../lib/db';\nimport request from 'supertest';\nimport app from '../../../app';\nconst chance = require('chance').Chance();\nimport { mockPoll, mockPolls, postPoll } from '../../../testing/fixtures/poll';\nimport { randomVoteQuantities, randomVoteArrays, runVotes } from '../../../testing/fixtures/vote';\n\ndescribe('polls routes', () => {\n\n  let createdUser;\n  let createdToken;\n\n  beforeEach(async () => {\n    await request(app)\n      .post('/api/users/signup')\n      .send({ email: 'jack@test.com', password: 'abcdef' })\n    await request(app)\n      .post('/api/users/login')\n      .send({ email: 'jack@test.com', password: 'abcdef' })\n      .then(res => {\n        createdUser = res.body;\n        createdToken = res.header['x-auth-token'];\n      });\n\n  });\n  beforeAll(async () => {\n    await dropCollection('polls');\n    await dropCollection('votes');\n  });\n  afterAll(async () => await disconnect());\n\n  test('post to /api/polls', async () => {\n\n    const poll = mockPoll();\n\n    await request(app)\n      .post('/api/polls')\n      .set('Authorization', `Bearer ${createdToken}`)\n      .send(poll)\n      .then(res => {\n        checkCode(200)(res);\n        expect(res.body).toEqual({\n          ...poll,\n          _id: expect.any(String),\n          __v: expect.any(Number),\n          choices: poll.choices.map(choice => ({ ...choice, _id: expect.any(String) }))\n        })\n      });\n  });\n\n  test('get to /api/polls', async () => {\n\n    const polls = mockPolls(10);\n    polls.forEach(poll => postPoll(poll, createdToken));\n\n    await request(app)\n      .get('/api/polls')\n      .then(res => {\n        checkCode(200)(res);\n        polls.forEach(poll => {\n          expect(res.body).toContainEqual({\n            ...poll,\n            _id: expect.any(String),\n            __v: expect.any(Number),\n            choices: poll.choices.map(choice => {\n              return { ...choice, _id: expect.any(String) };\n            })\n          });\n        });\n      });\n  });\n\n  test('get to /api/polls/:id', async () => {\n\n    const poll = mockPoll();\n    let createdPoll;\n\n    await request(app)\n      .post('/api/polls')\n      .set('Authorization', `Bearer ${createdToken}`)\n      .send(poll)\n      .then(({ body }) => createdPoll = body);\n\n    await request(app)\n      .get(`/api/polls/${createdPoll._id}`)\n      .then(res => {\n        checkCode(200)(res);\n        expect(res.body).toEqual(createdPoll)\n    });\n  });\n\n});\n"],"file":"routes.test.js"}